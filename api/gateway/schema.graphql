
schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

input AddTeamMembersInput {
  teamId: String!
  userIds: [String!]!
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  email: String!
  firstname: String!
  lastname: String!
  role: UserRole
  status: UserStatus
  teamId: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  """Add an existing Organization users to the team"""
  addTeamMembers(input: AddTeamMembersInput!, where: TeamsWhereUniqueInput!): [UserOnTeam!]! @join__field(graph: MAIN)

  """Create new user details of a user"""
  createUser(input: CreateUserInput!): User! @join__field(graph: MAIN)

  """Remove a user from an existing team"""
  deleteTeamMember(where: UserOnTeamWhereUniqueInput!): UserOnTeam! @join__field(graph: MAIN)

  """Login with credentials"""
  login(input: LoginInput!): AuthPayload! @join__field(graph: MAIN)

  """Safety measure to close current session"""
  logout: User! @join__field(graph: MAIN)

  """Request tokens renewal with existing cookie"""
  refreshToken: AuthPayload! @join__field(graph: MAIN)

  """Update details of a user (admin only)"""
  updateUser(input: UpdateUserInput!, where: UserWhereUniqueInput!): User! @join__field(graph: MAIN)
  updateUserOnTeam(input: UpdateUserOnTeamsInput!, where: UserOnTeamWhereUniqueInput!): UserOnTeam! @join__field(graph: MAIN)

  """Updates users existing password"""
  updateUserPassword(input: UpdateUserPasswordInput!): User! @join__field(graph: MAIN)
}

type Query {
  """Return self information"""
  me: User! @join__field(graph: MAIN)

  """Return user information"""
  user(where: UserWhereUniqueInput!): User! @join__field(graph: MAIN)

  """Return self information"""
  users: [User!]! @join__field(graph: MAIN)
}

enum TeamStatus {
  ACTIVE
  PENDING
  SUSPENDED
}

type Teams
  @join__owner(graph: MAIN)
  @join__type(graph: MAIN, key: "id")
{
  accessList: JSON! @join__field(graph: MAIN)
  createdAt: DateTime! @join__field(graph: MAIN)
  description: String @join__field(graph: MAIN)
  endDate: DateTime! @join__field(graph: MAIN)
  id: ID! @join__field(graph: MAIN)
  name: String! @join__field(graph: MAIN)
  organizationId: String! @join__field(graph: MAIN)
  status: TeamStatus! @join__field(graph: MAIN)
  thumb: String @join__field(graph: MAIN)
  updatedAt: DateTime! @join__field(graph: MAIN)
}

enum TeamsUserRole {
  CONSUMER
  HEAD
}

input TeamsWhereUniqueInput {
  id: ID!
}

input UpdateUserInput {
  role: UserRole
  status: UserStatus
}

input UpdateUserOnTeamsInput {
  role: TeamsUserRole
}

input UpdateUserPasswordInput {
  password: String!
  previousPassword: String!
}

type User
  @join__owner(graph: MAIN)
  @join__type(graph: MAIN, key: "id")
{
  address: String @join__field(graph: MAIN)
  createdAt: DateTime! @join__field(graph: MAIN)
  email: String! @join__field(graph: MAIN)
  firstname: String! @join__field(graph: MAIN)
  id: ID! @join__field(graph: MAIN)
  lastname: String! @join__field(graph: MAIN)
  location: String @join__field(graph: MAIN)
  phone: String @join__field(graph: MAIN)
  photo: String @join__field(graph: MAIN)
  role: UserRole! @join__field(graph: MAIN)
  status: UserStatus! @join__field(graph: MAIN)
  updatedAt: DateTime! @join__field(graph: MAIN)
}

type UserOnTeam
  @join__owner(graph: MAIN)
  @join__type(graph: MAIN, key: "userId teamId")
{
  accessedAt: DateTime! @join__field(graph: MAIN)
  createdAt: DateTime! @join__field(graph: MAIN)
  role: TeamsUserRole! @join__field(graph: MAIN)
  team: Teams! @join__field(graph: MAIN)
  teamId: ID! @join__field(graph: MAIN)
  updatedAt: DateTime! @join__field(graph: MAIN)
  user: User! @join__field(graph: MAIN)
  userId: ID! @join__field(graph: MAIN)
}

input UserOnTeamWhereUniqueInput {
  teamId: ID!
  userId: ID!
}

enum UserRole {
  ADMIN
  ANALYST
  CONSUMER
}

enum UserStatus {
  ACTIVE
  PENDING
  SUSPENDED
}

input UserWhereUniqueInput {
  id: ID!
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  MAIN @join__graph(name: "main" url: "http://localhost:4001/graphql")
}
